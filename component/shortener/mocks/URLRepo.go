// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entity "shorturl/entity"

	mock "github.com/stretchr/testify/mock"
)

// URLRepo is an autogenerated mock type for the URLRepo type
type URLRepo struct {
	mock.Mock
}

// CountID provides a mock function with given fields: ID
func (_m *URLRepo) CountID(ID string) (int, error) {
	ret := _m.Called(ID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ent
func (_m *URLRepo) Create(ent *entity.URL) error {
	ret := _m.Called(ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.URL) error); ok {
		r0 = rf(ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrHit provides a mock function with given fields: ID
func (_m *URLRepo) IncrHit(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ID
func (_m *URLRepo) Read(ID string) (*entity.URL, error) {
	ret := _m.Called(ID)

	var r0 *entity.URL
	if rf, ok := ret.Get(0).(func(string) *entity.URL); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
